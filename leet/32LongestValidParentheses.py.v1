class Solution(object):

  def findFirstPair(self, s, start,finish):
    for i in range(start+1,finish):
      if s[i-1] == "(" and s[i] == ")":
        return (i-1,i)
    return None,None

    
  def longestValidParentheses(self, s, start=-1, finish=-1):
    """
    :type s: str
    :rtype: int
    """
    #self.stack         = []
    if s is None or len(s) <= 1:
      return 0

    if start == -1:
      start = 0
      finish = len(s)


    leftVisited,rightVisited = self.findFirstPair(s, start,finish)
    #start = 0
    #finish = len(s)
    if leftVisited is None: # can't find a pair at all
      return 0

    leftValid = True
    rightValid = True
    # expand to left and right from here.
    # Corner case 1: reach the edge
    while leftValid and rightValid:
      print(leftValid, rightValid, 
        leftVisited,rightVisited,s[leftVisited:rightVisited+1])
      if leftValid == True:
        if leftVisited >= 2 and \
            s[leftVisited - 2] == "(" and s[rightVisited - 1] == ")":
          leftVisited -= 2
          continue

        if leftVisited >= 1 and s[leftVisited - 1] == "(":
          leftVisited -= 1
          leftValid = False
          continue

      if rightValid == True:
        if rightVisited < len(s) - 2 and \
            s[rightVisited + 1] == "(" and s[rightVisited + 2] == ")":
          rightVisited += 2
          continue

        if rightVisited < len(s) - 1 and s[rightVisited + 1] == ")":
          rightVisited += 1
          rightValid = False
          continue

      #it can reach here in two cases
      # leftValid or rightValid is False
      # it is still valid, but hit the edge
      if leftValid == rightValid == False:
        # left and right matched, just expand
        leftValid = rightValid = True
        continue

      if leftVisited == 0 or rightVisited == len(s)-1:
        break

    print(leftValid, rightValid, 
        leftVisited,rightVisited,s[leftVisited:rightVisited+1])

    current = rightVisited - leftVisited + 1
    if not leftValid:
      current -= 1
    if not rightValid:
      current -= 1

    return max(
      self.longestValidParentheses(s, start, leftVisited),
      current,
      self.longestValidParentheses(s, rightVisited + 1, finish)
      )


      


if __name__ == "__main__":
  sol = Solution()

  tests = [
    {"input"  : "(()","output" : 2},
    {"input"  : "()","output" : 2},
    {"input"  : ")()())","output" : 4},
    {"input"  : "()(()","output" : 2}, # lef par brakes the rule
    {"input"  : "(()(((()","output" : 2},
    {"input"  : "()(())","output" : 6},
  ]
  for test in tests:
    print("testing %s ===============" % test["input"])
    output = sol.longestValidParentheses(test["input"])
    try:
      assert(output == test["output"]
      )
    except:
      print(
        "\033[91m****Error input: %s ==> output: %s , expect: %s\033[0m" % 
        (
          test["input"],
          output,
          test["output"]
          )
        )
